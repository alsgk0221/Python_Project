import streamlit as st
from PIL import Image, ImageOps
import numpy as np
import cv2
import torch
import torchvision

model = torchvision.models.vgg11(pretrained=True)
model.classifier[6] = torch.nn.Linear(4092, 2)
model = torch.load("save/model_16.pt")
st.write(model)
def model_predict(image, model):
    model.eval()

    size = (256, 256)

    image = ImageOps.fit(image, size, Image.ANTIALIAS)
    image = np.asarray(image).astype(np.float32)

    img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    img_resize = (cv2.resize(img, dsize=(256, 256), interpolation=cv2.INTER_CUBIC)) / 255.
    img_resize = torch.tensor(img_resize)
    img_resize = img_resize.permute(2, 0, 1)
    img_resize = img_resize.unsqueeze(0)

    predict = model(img_resize)
    values, label = torch.topk(predict, k = 1)
    if label == 0:
        st.write("cat")
    else:
        st.write("dog")


st.write("Test code")
file = st.file_uploader("Upload an image file!", type=["jpg", "png"])

if file is None:
    st.text("Upload an image file!")
else:
    img = Image.open(file)
    st.image(img, use_column_width=True)
    model = model.float()
    model_predict(img, model)
