import pygame
import random
from datetime import datetime
from datetime import timedelta
import sys
from pygame.locals import QUIT,Rect

pygame.init()

pygame.display.set_caption("Test Window")
FPSCLOCK = pygame.time.Clock()
BACK_YELLOW = (255, 255, 150)
RED = (255, 100, 100)
GREEN = (128, 255, 0)
size = [625, 625]
screen = pygame.display.set_mode(size)

flag = 0
score = 0

done = False
clock = pygame.time.Clock()
last_moved_time = datetime.now()

KEY_DIRECTION = {
    pygame.K_UP: 'N',
    pygame.K_DOWN: 'S',
    pygame.K_LEFT: 'W',
    pygame.K_RIGHT: 'E'
}

class Snake:

    def __init__(self):
        self.positions = [(2, 0),(1, 0),(0, 0)]
        self.direction = ''
        self.flag = 0

    def crash(self):
        head_position = self.positions[0]
        if head_position[0] == 30 or head_position[1] == 30 or head_position[0] == -1 or head_position[1] == -1:
            return True

    def draw(self):
        for position in self.positions:
            draw_block(screen, GREEN, position)

    def move(self):
        head_position = self.positions[0]
        y, x = head_position
        if self.direction == 'N':
            if self.flag != 2:
                self.positions = [(y, x - 1)] + self.positions[:-1]
                self.flag = 1
            elif self.flag == 2:
                self.positions = [(y, x + 1)] + self.positions[:-1]
                #self.flag = 2
        elif self.direction == 'S':
            if self.flag != 1:
                self.positions = [(y, x + 1)] + self.positions[:-1]
                self.flag = 2
            elif self.flag == 1:
                self.positions = [(y, x - 1)] + self.positions[:-1]
                #self.flag = 1
        elif self.direction == 'W':
            if self.flag != 4:
                self.positions = [(y - 1, x)] + self.positions[:-1]
                self.flag = 3
            elif self.flag == 4:
                self.positions = [(y + 1, x)] + self.positions[:-1]
                #self.flag = 4
        elif self.direction == 'E':
            if self.flag != 3:
                self.positions = [(y + 1, x)] + self.positions[:-1]
                self.flag = 4
            elif self.flag == 3:
                self.positions = [(y - 1, x)] + self.positions[:-1]
                #self.flag = 3

    def grow(self):

        tail_position = self.positions[-1]
        x, y = tail_position
        if self.direction == 'N':
            self.positions.append((x - 1, y))
        elif self.direction == 'S':
            self.positions.append((x + 1, y))
        elif self.direction == 'W':
            self.positions.append((x, y - 1))
        elif self.direction == 'E':
            self.positions.append((x, y + 1))

class Apple:
    def __init__(self, position=(5, 5)):
        self.position = position

    def draw(self):
        draw_block(screen, RED, self.position)

def print_text(gameover, score):

    myfont = pygame.font.SysFont(None,70)
    bigfont = pygame.font.SysFont(None,100)
    message1 = bigfont.render("GAME - OVER",True,(255,255,255))
    message2 = myfont.render(gameover ,True,(255,255,90))
    message3 = myfont.render("Your Score : "+score,  True, (255,255,90))
    while True:
        screen.fill((128,128,192))
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
        screen.blit(message1, (90, 110))
        screen.blit(message2, (85, 280))
        screen.blit(message3, (135,380))
        pygame.display.update()
        FPSCLOCK.tick(30)

def draw_block(screen, color, position):
    block = pygame.Rect((position[0] * 20, position[1] * 20),
                        (20, 20))
    pygame.draw.rect(screen, color, block)

def runSnake(score):
    global done, last_moved_time

    snake = Snake()
    apple = Apple()

    while not done:
        clock.tick(10)
        screen.fill(BACK_YELLOW)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    snake.direction = 'N'
                elif event.key == pygame.K_DOWN:
                    snake.direction = 'S'
                elif event.key == pygame.K_LEFT:
                    snake.direction = 'W'
                elif event.key == pygame.K_RIGHT:
                    snake.direction = 'E'

                if event.key == KEY_DIRECTION:
                    snake.direction = KEY_DIRECTION[event.key]

        if snake.positions[0] == apple.position:
            snake.grow()
            score += 1
            apple.position = (random.randint(0, 19), random.randint(0, 19))

        if timedelta(seconds=0.5) <= datetime.now() - last_moved_time:
            snake.move()

        if snake.positions[0] in snake.positions[1:]:
            print("뱀이 자신의 몸에 닿았습니다.")
            print_text("Colliding with itself", str(score))
            done = True

        temp = snake.crash()
        if temp == True:
            print("뱀이 벽에 충돌했습니다.")
            print_text("Colliding into the wall", str(score))
            done = True

        snake.draw()
        apple.draw()
        pygame.display.update()

runSnake(score)
pygame.quit()
