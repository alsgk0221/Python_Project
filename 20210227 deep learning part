import torch
import torch.nn as nn
import torch.nn.functional as F
from data_loader import get_data_loader
from torchvision.models import vgg11
train_loader = get_data_loader()


model = vgg11(pretrained=True)
model.classifier[6] == nn.Linear(4096, 2)


optimizer = torch.optim.SGD(model.parameters(), lr=0.01)
total_epoch = 200
loss = nn.CrossEntropyLoss()

for i,(inputs, target) in enumerate(train_loader):

    output = model(inputs)
    target = target.long()
    cost = loss(output, target)
    optimizer.zero_grad()
    cost.backward()
    optimizer.step()
    if i%10 ==0:
        print('Epoch: {:4d}/{}, Cost: {:.6f}'.format(i, total_epoch, cost.item()))
