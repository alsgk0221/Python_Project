from torch.utils.data.dataset import Dataset
from torchvision import transforms
import pandas as pd
import numpy as np
from PIL import Image
import torch
import cv2


class customDataset(Dataset):

    def __init__(self, file_path):

        self.trans = transforms.Compose([transforms.RandomHorizontalFlip(),
                                         transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                                              std=[0.229, 0.224, 0.225])])
        self.to_tensor = transforms.ToTensor()
        f = open("test", 'r')
        total_line = f.readlines()

        self.img_path = []
        self.label_list = []
        for i in range(len(total_line)):
            img = total_line[i].split(',')[0]
            self.img_path.append(img)

            self.label_list.append(total_line[i].split(',')[1].strip('\n'))
        self.data_len = len(self.label_list)

    def __getitem__(self, index):

        img = cv2.imread(self.img_path[index])
        img = cv2.resize(img, dsize=(256, 256), interpolation=cv2.INTER_AREA)
        img = self.to_tensor(img)
        label = float(self.label_list[index])

        return img, label

    def __len__(self):
        return self.data_len

def get_data_loader():

    path = "test"
    custom_dataset = customDataset(path)
    train_loader = torch.utils.data.DataLoader(dataset=custom_dataset, batch_size=1, shuffle=False)
    return train_loader
