from torch.utils.data.dataset import Dataset
from torchvision import transforms
import pandas as pd
import numpy as np
from PIL import Image
import torch

class NkDataSet(Dataset):

    # 데이터 초기화를 위한 작업
    def __init__(self, file_path):

        self.trans = transforms.Compose([transforms.RandomHorizontalFlip(),
                                         transforms.ToTensor(),
                                        ])
        # RandomHorizontalFlip : 새로운 이미지처럼 보이기 위해 좌우반전


        self.data_info = pd.read_csv(file_path, header=None)

        # iloc : 데이터를 원하는 부분만 자르기 위해 사용
        # arr : 배열 (list 와 유사함)
        self.image_arr = np.asarray(self.data_info.iloc[:,0])
        self.label_arr = np.asarray(self.data_info.iloc[:,1])
        self.label_arr = torch.from_numpy(self.label_arr)

        self.data_len = len(self.data_info.index)


    # 경로 통해서 실제 데이터 접근 후 데이터 반환 - 함수
    def __getitem__(self, index):

        img_name = self.image_arr[index]
        img_as_img = Image.open(img_name)
        img_as_tensor = self.trans(img_as_img)
        img_label = self.label_arr[index]

        return img_as_tensor, img_label

    # 데이터 전체 길이 계산 - 함수
    def __len__(self):
        return self.data_len

def get_data_loader(args):
    # train, validation(val), test : 학습, 평가, 검사(테스트)

    # 학습 data set 의 경로
    csv_path = '/tmp/pycharm_project_917/files/train_vision.train_label.csv'
    train_dataset = NkDataSet(csv_path)

    # 평가 data set 의 경로
    val_csv_path = '/tmp/pycharm_project_917/files/val_vision.train_label.csv'
    val_dataset = NkDataSet(val_csv_path)

    # batch_size : 한번에 학습할 데이터 수
    # shuffle : 데이터를 섞는 것 -> 학습 시에 컴퓨터가 순서를 암기 할 수 있기에 True 로 설정
    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=args.batch_size, shuffle=True)
    val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=args.batch_size, shuffle=False)

    return train_loader, val_loader

# train_label.csv 경로 설정 (필수)
csv_path  = './train_label.csv'
custom_dataset = NkDataSet(csv_path)
my_dataset_loader = torch.utils.data.DataLoader(dataset=custom_dataset,
                                                batch_size=1,
                                                shuffle=False)

# enumerate : list 내용을 순서대로 매기면서 프린트
for i, (images, label) in enumerate(my_dataset_loader):
    print(images.shape)
